name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.12'

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows build
          - os: windows
            runner: windows-latest
            arch: x86_64
            build_cmd: |
              python -m PyInstaller --clean --noconfirm main.spec
              move dist\main.exe dist\sql-server-odoo-sync-windows-x86_64.exe
            artifact_name: sql-server-odoo-sync-windows-x86_64.exe
            artifact_path: dist/sql-server-odoo-sync-windows-x86_64.exe
            content_type: application/octet-stream

          # macOS Intel build
          - os: macos
            runner: macos-13
            arch: x86_64
            build_cmd: |
              python -m PyInstaller --clean --noconfirm main.spec
              mv dist/main dist/sql-server-odoo-sync-macos-x86_64
              cd dist && tar -czf sql-server-odoo-sync-macos-x86_64.tar.gz sql-server-odoo-sync-macos-x86_64
            artifact_name: sql-server-odoo-sync-macos-x86_64.tar.gz
            artifact_path: dist/sql-server-odoo-sync-macos-x86_64.tar.gz
            content_type: application/gzip
            
          # macOS Apple Silicon build
          - os: macos
            runner: macos-14  # Apple Silicon runner
            arch: arm64
            build_cmd: |
              python -m PyInstaller --clean --noconfirm main.spec
              mv dist/main dist/sql-server-odoo-sync-macos-arm64
              cd dist && tar -czf sql-server-odoo-sync-macos-arm64.tar.gz sql-server-odoo-sync-macos-arm64
            artifact_name: sql-server-odoo-sync-macos-arm64.tar.gz
            artifact_path: dist/sql-server-odoo-sync-macos-arm64.tar.gz
            content_type: application/gzip

          # Linux build
          - os: linux
            runner: ubuntu-latest
            arch: x86_64
            build_cmd: |
              python -m PyInstaller --clean --noconfirm main.spec
              mv dist/main dist/sql-server-odoo-sync-linux-x86_64
              cd dist && tar -czf sql-server-odoo-sync-linux-x86_64.tar.gz sql-server-odoo-sync-linux-x86_64
            artifact_name: sql-server-odoo-sync-linux-x86_64.tar.gz
            artifact_path: dist/sql-server-odoo-sync-linux-x86_64.tar.gz
            content_type: application/gzip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'main.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies (Linux)
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libegl1 \
            libxkbcommon-x11-0 \
            libxcb-icccm4 \
            libxcb-image0 \
            libxcb-keysyms1 \
            libxcb-randr0 \
            libxcb-render-util0 \
            libxcb-xinerama0 \
            libxcb-xfixes0 \
            libxcb-shape0 \
            libxcb-cursor0 \
            libfontconfig1 \
            libfreetype6 \
            libx11-6 \
            libx11-xcb1 \
            libxext6 \
            libxrender1 \
            unixodbc-dev \
            build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyQt6 pyodbc requests PyInstaller

      - name: Create icon file
        run: |
          python -c "
          import base64
          from pathlib import Path
          
          # Create a simple ICO file (16x16 black square)
          ico_data = base64.b64decode(
              'AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
              'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
          )
          
          Path('icon.ico').write_bytes(ico_data)
          print('Created icon.ico')
          "

      - name: Install Microsoft ODBC Driver (Windows)
        if: matrix.os == 'windows'
        run: |
          # Download and install Microsoft ODBC Driver 18 for SQL Server (latest)
          try {
            Write-Host "Downloading Microsoft ODBC Driver 18 for SQL Server..."
            Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2307162" -OutFile "msodbcsql18.msi" -UseBasicParsing
            Write-Host "Installing ODBC Driver 18..."
            Start-Process msiexec.exe -Wait -ArgumentList '/I msodbcsql18.msi /quiet /norestart IACCEPTMSODBCSQLLICENSETERMS=YES'
            Write-Host "ODBC Driver 18 installed successfully"
          }
          catch {
            Write-Host "Failed to install ODBC Driver 18, trying Driver 17..."
            try {
              Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2266337" -OutFile "msodbcsql17.msi" -UseBasicParsing
              Start-Process msiexec.exe -Wait -ArgumentList '/I msodbcsql17.msi /quiet /norestart IACCEPTMSODBCSQLLICENSETERMS=YES'
              Write-Host "ODBC Driver 17 installed successfully"
            }
            catch {
              Write-Host "Failed to install ODBC drivers. Continuing build..."
              Write-Host "Error: $($_.Exception.Message)"
            }
          }
        shell: powershell

      - name: Install Microsoft ODBC Driver (macOS)
        if: matrix.os == 'macos'
        run: |
          # Install Microsoft ODBC Driver 17 for SQL Server on macOS
          # Homebrew should already be installed on GitHub runners
          echo "Setting up Microsoft ODBC driver repository..."
          brew tap microsoft/mssql-release https://github.com/Microsoft/homebrew-mssql-release || true
          brew update || true
          
          # Install with automatic license acceptance
          echo "Installing Microsoft ODBC Driver 17..."
          echo "YES" | HOMEBREW_NO_ENV_FILTERING=1 ACCEPT_EULA=Y brew install msodbcsql17 || true
          
          # Also try installing mssql-tools
          echo "Installing SQL Server tools..."
          echo "YES" | HOMEBREW_NO_ENV_FILTERING=1 ACCEPT_EULA=Y brew install mssql-tools || true
          
          # Verify installation
          if brew list | grep -q msodbcsql17; then
            echo "✅ Microsoft ODBC Driver 17 installed successfully"
          else
            echo "⚠️ ODBC Driver installation may have failed, but continuing build..."
          fi

      - name: Install Microsoft ODBC Driver (Linux)
        if: matrix.os == 'linux'
        run: |
          # Install Microsoft ODBC Driver 17 for SQL Server on Ubuntu
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17

      - name: Update PyInstaller spec for cross-platform
        run: |
          python -c "
          spec_content = '''
          # -*- mode: python ; coding: utf-8 -*-
          import sys
          
          a = Analysis(
              ['main.py'],
              pathex=[],
              binaries=[],
              datas=[('icon.ico', '.') if sys.platform == 'win32' else []],
              hiddenimports=['PyQt6.QtCore', 'PyQt6.QtGui', 'PyQt6.QtWidgets'],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              noarchive=False,
              optimize=0,
          )
          pyz = PYZ(a.pure)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.datas,
              [],
              name='main',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=False if sys.platform == 'win32' else True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
              icon='icon.ico' if sys.platform == 'win32' else None,
          )
          '''
          
          with open('main.spec', 'w') as f:
              f.write(spec_content)
          print('Updated main.spec for cross-platform build')
          "

      - name: Build application
        run: ${{ matrix.build_cmd }}

      - name: Verify build output
        run: |
          ls -la dist/
          if [ -f "${{ matrix.artifact_path }}" ]; then
            echo "✅ Build artifact created successfully: ${{ matrix.artifact_path }}"
            if [[ "${{ matrix.artifact_path }}" == *".exe" ]] || [[ "${{ matrix.artifact_path }}" == *"linux"* ]]; then
              file "${{ matrix.artifact_path }}" || true
            fi
          else
            echo "❌ Build artifact not found: ${{ matrix.artifact_path }}"
            exit 1
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            artifacts/**/*
          body: |
            ## SQL Server to Odoo Sync - Release ${{ github.ref_name }}
            
            This release includes executables for Windows, macOS (Intel & Apple Silicon), and Linux platforms.
            
            ### 📥 Downloads
            - **🪟 Windows**: Download `sql-server-odoo-sync-windows-x86_64.exe`
            - **🍎 macOS (Intel)**: Download `sql-server-odoo-sync-macos-x86_64.tar.gz`
            - **🍎 macOS (Apple Silicon)**: Download `sql-server-odoo-sync-macos-arm64.tar.gz`
            - **🐧 Linux**: Download `sql-server-odoo-sync-linux-x86_64.tar.gz`
            
            ### 🚀 Features
            - Modern PyQt6 desktop interface with system tray integration
            - Automated synchronization of SQL Server tables to Odoo 14
            - Multi-database support with selective table sync
            - Intelligent change detection using MD5 hashing
            - Comprehensive logging and error handling
            - CSV export with automatic file management
            - Configurable retry logic and timeout settings
            
            ### 📋 Installation
            
            #### Windows
            1. Download `sql-server-odoo-sync-windows-x86_64.exe`
            2. Run the executable directly
            3. Ensure Microsoft ODBC Driver 17 for SQL Server is installed
            
            #### macOS
            1. Download the appropriate file for your Mac:
               - **Intel Macs**: `sql-server-odoo-sync-macos-x86_64.tar.gz`
               - **Apple Silicon Macs (M1/M2/M3)**: `sql-server-odoo-sync-macos-arm64.tar.gz`
            2. Extract: `tar -xzf sql-server-odoo-sync-macos-*.tar.gz`
            3. Run the executable: `./sql-server-odoo-sync-macos-*`
            4. Install Microsoft ODBC Driver if needed: `brew install msodbcsql17`
            
            #### Linux
            1. Download `sql-server-odoo-sync-linux-x86_64.tar.gz`
            2. Extract: `tar -xzf sql-server-odoo-sync-linux-x86_64.tar.gz`
            3. Make executable: `chmod +x sql-server-odoo-sync-linux-x86_64`
            4. Run: `./sql-server-odoo-sync-linux-x86_64`
            5. Install Microsoft ODBC Driver if needed
            
            ### ⚙️ Configuration
            On first run, the application will create a `config.ini` file with default settings. Configure your:
            - SQL Server connection details
            - Odoo instance settings
            - Sync preferences and schedules
            - Logging levels
            
            ### 📚 Documentation
            For detailed setup and configuration instructions, see the [README.MD](README.MD) file.
            
            ### 🔒 Security Note
            Some antivirus software may flag PyInstaller executables as suspicious. This is a false positive common with packaged Python applications. The source code is available for review in this repository.
            
            ### 🐛 System Requirements
            - **Windows**: Windows 10 or later, Microsoft ODBC Driver 17 for SQL Server
            - **macOS**: macOS 10.14 or later, Microsoft ODBC Driver 17 for SQL Server
            - **Linux**: Ubuntu 18.04+ or equivalent, Microsoft ODBC Driver 17 for SQL Server
            - Network access to both SQL Server and Odoo instances
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}